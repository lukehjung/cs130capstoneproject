 Overview of our web server
                          /----------------\
                          | server_main.cc |-----------------------------\
                          \----------------/                 get parsed  |
                                  |                          config      |
                                  | initialize all                       |
                                  | the handler                          |
                                  |                                      |
                                  v                                      v
                             /----------\                       /-----------------\
               /-------------| server.h |                       | config_parser.h |
               |             \----------/                       \-----------------/
               | get request
               | handler
               |
               v
         /-----------\                          /--------------\  content   /--------\
         | session.h |------------------------->| dispatcher.h |----------->| client |
         \-----------/         response         \--------------/            \--------/
             |   ^
     request |   | response
             v   |
 /---------------------------\
 | handleRequest             |
 |  |->echo_handler.h        |
 |  |->static_file_handler.h |
 |  |->status_handler.h      |
 |  |->error_handler.h       |
 \---------------------------/

The primary function of this program is to set up a server that can do simple echoing,
serve a static file, return the request stats, and show the error notice. The program is
written in C++ and Boost library. The chart above shows the basic layout of the source
code. The main file server_main.cc, which sets up the server object and parses the
config file. The config file parsing is done by config parser (config_parser.h).
Upon the initialization of the server, the server object gets the request handler from
the session between the client and server.

The session object is initialized between the client and server, session will get the request
from client, pass it to the handleRequest to figure out what type of the request. Upon the coming
request from session, the handleRequest will issue the appropriate response. Once the session
receive the response from handleRequest, it pass this response to the dispatcher.

For each incoming request, a response would be generated and passed to the dispatcher.
Then, the dispatcher sends the content of the response to the client.

Logging
Although logging is not shown in the chart above, it is mainly used in every file to record
some important steps of the server. The header logging.h contains the scheme of the logging
class. It adopts singleton design pattern to make sure there is only one running instance of
the logging. The logging has a specific method for different level of the severity.

Include Folder
This folder contains several classes related to the web server
	• server.h: defines class server. A server object is initiated.
	• session.h: defines class session. A session object is initiated by the server
	             upon receiving a new request.
	• request_handler.h: defines virtual base class RequestHandler. Given a request object,
                             the handler return a pointer to a new Response object.
                             The current implementation includes several kinds of handlers that are:
		o echo_handler.h: defines class EchoHandler.
                                  It returns a response which body field resembles the request.
		o static_file_handler.h: defines class StaticFileHandler.
                                         It returns a response containing the requested file with
                                         corresponding type formats.
		o status_handler.h: defines class StatusHandler.
                                    It returns a response containing current server status
                                    (request history, registered handlers).
		o error_handler.h: defines class ErrorHandler.
                                   It returns a response of not found.
                                   This handler is registered with path /, so this handler will be
                                   invoked for requests to undefined paths.
	• request.h: defines class Request. A request object is initiated.
	• response.h: defines class Response. A response object is initiated.
	• port.h: defines class Port. A port number is extracted from the config file.
	• utils.h: defines class Utils. An utils object is initiated.
	• dispatcher.h: define class Dispatcher. A dispatcher object is initiated.

Build
Use cmake to perform the build (in project directory cs130):
	$ mkdir build
	$ cd build
	$ cmake ..
	$ make

Test
There are two ways to run the tests:
	• From project directory, go to build directory and run “make test”
	• From project directory, go to tests directory and run “../build/bin/<test>”
There are also an integration test which is implemented by shell script.
To run it separately, run it from the build directory:
	• cd build && ..tests/integration_test.sh

Run
To run the server, run the following command from the root directory:
	• ./build/bin/webserver ./conf/deploy.conf
You can use your own configuration file as the argument for the program.

How to add a RequestHandler
Here we can use the StatusHandler class as an example to demonstrate how to add
a new request handler to the server.
	• Declare the new status handler, specify the URL path and other attributes
          for StatusHandler in the ./conf/deploy.conf file.
		# File: conf/deploy.conf
		location “/status” StatusHandler {
		}
	• Define the class for the new request handler. The StatusHandler class here
          uses public inheritance to inherit the RequestHandler base class. 
          The header file status_handler.h should be in include directory and
          the status_handler.cc should be in src directory.
		#include "request_handler.h"
		#include "response.h"
		#include "config_parser.h"
		#include "utils.h"
		#include <iostream>
		#include <list>
		#include <iterator>
		#include <type_traits>
		class StatusHandler : public RequestHandler {
    		  public:
        	    StatusHandler() {};
        	    static RequestHandler* Init(const std::string& location_path,
                                                const NginxConfig& config);
        	    Response handleRequest(const Request& request);
        	    std::string addRecord(const Request& request, std::string handlerName,
                                          Response::StatusCode error_);
        	    Response::StatusCode getStatusCode(std::string handlerName);
        	    std::string getAllStatus();
        	    static std::list<std::string> status;
		};
	• In the status_handler.cc file, we implement the methods of StatusHandler.
        	#include "status_handler.h"
		std::list<std::string> StatusHandler::status;
		RequestHandler* StatusHandler::Init(const std::string& location_path,
                                                    const NginxConfig& config) {
                  # The implemetation
                }
                Response StatusHandler::handleRequest(const Request& request) {
                  # The implementation
                }
                std::string StatusHandler::addRecord(const Request& request,
                                                     std::string handlerName,
                                                     Response::StatusCode error_) {
                  # The implementation
                }
                Response::StatusCode StatusHandler::getStatusCode(std::string handlerName) {
                  # The implementation
                }
                std::string StatusHandler::getAllStatus() {
                  # The implementation
                }
	• In the dispatcher.cc, include the dispatcher.h header (which include session.h).
	• Also include the status_handler.h header file in session.cc.
	• Append the new handler src/status_handler.cc to the CMakeLists.txt.
		add_library(request_handler_lib
                            src/request_handler.cc
                            src/dispatcher.cc
                            src/static_file_handler.cc
                            src/echo_handler.cc
                            src/error_handler.cc
                            # link the new request handler class
                            src/status_handler.cc)
	• Add unit tests for the new request handler in tests directory tests/status_handler_test.cc

Note that the instruction above is the minimum that you have to do to build successfully. 
If there are more dependencies for the class, you need to include them as well.
Also, these libraries are required:
	• Boost::system
	• Boost::filesystem
	• Boost::log_setup
	• Boost::log
	• Boost:regex